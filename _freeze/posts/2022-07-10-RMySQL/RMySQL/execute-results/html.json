{
  "hash": "51a1775f29039c67cd9a9498148e0bb6",
  "result": {
    "markdown": "---\ntitle: \"R과 MySQL 연동하기\"\ndescription: |\n  RMySQL, DBI 패키지를 활용하여 R과 MySQL 연동하기 \nauthor: \"Don Don\"\ndate: \"2022-07-10\"\ncategories: [R, RMySQL]\nimage : \"https://cdn.ucberkeleybootcamp.com/wp-content/uploads/sites/106/2020/03/SQL-Boot-Camp-San-Francisco.jpeg\"\n---\n\n\n\n\nR과 MySQL을 연동하는 패키지는 여러가지가 있다(RODBC, odbc...). 그 중에서 가장 쉽게 사용할 수 있는 패키지가 RMySQL 패키지이다. 다른 패키지의 경우 odbc driver를 설치해야 정상적으로 작동하는 것 같은데, mac의 경우 설치가 조금 복잡하다. 몇 가지 시도해본 후 내린 결론은 RMySQL 패키지가 가장 쉽게 사용할 수 있는 것 같다. \n\n\n## packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DBI)\nlibrary(RMySQL)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\n다음의 패키지를 부착합니다: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n:::\n\n\nDBI 패키지는 R과 데이터베이스간 연결을 위한 패키지이고, RMySQL은 데이터베이스를 연결할 때, MySQL을 사용하도록 선언?하는 패키지이다. \n\n\n\n## R과 DB 연결 \n\n\n::: {.cell}\n\n```{.r .cell-code}\nDBI::dbConnect(drv, \n              dname, \n              user, \n              password, \n              host, ...)\n```\n:::\n\n\n-   drv : DBIDriver 종류 \n\n-   dbname : MySQL에 저장되어있는 DB 이름 \n\n-   user : \"root\" (default)\n\n-   password : 비밀번호 \n\n-   host: localhost(로컬에서 작업할 경우)\n\n혼공 SQL책에 나와있는 market_db DB를 불러왔다. \n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndrv <- dbDriver(\"MySQL\")\n\ncon = dbConnect(drv, \n                dbname = \"market_db\", \n                user = \"root\", \n                password = pat, \n                host = \"localhost\")\n```\n:::\n\n\n\n## DB에 있는 테이블 불러오기 \n\nmarket_db 안에 있는 buy table을 불러온 결과는 다음과 같다. \n\n::: {.cell}\n\n```{.r .cell-code}\nmydata = dbGetQuery(con, \"select * from buy\")\nmydata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   num mem_id prod_name group_name price amount\n1    1    BLK        ??       <NA>    30      2\n2    2    BLK      ????        ???  1000      1\n3    3    APN       ???        ???   200      1\n4    4    MMU       ???        ???   200      5\n5    5    BLK       ???         ??    50      3\n6    6    MMU       ???        ???    80     10\n7    7    GRL     ??SQL         ??    15      5\n8    8    APN     ??SQL         ??    15      2\n9    9    APN       ???         ??    50      1\n10  10    MMU        ??       <NA>    30      1\n11  11    APN     ??SQL         ??    15      1\n12  12    MMU        ??       <NA>    30      4\n```\n:::\n:::\n\n\n\n한글이 깨질 경우 아래 3줄을 입력하면 해결된다(<https://leti-lee.tistory.com/17> 내용 참고). \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbSendQuery(con, \"SET NAMES utf8;\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<MySQLResult:2,0,1>\n```\n:::\n\n```{.r .cell-code}\ndbSendQuery(con, \"SET CHARACTER SET utf8;\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<MySQLResult:-1327130544,0,2>\n```\n:::\n\n```{.r .cell-code}\ndbSendQuery(con, \"SET character_set_connection=utf8;\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<MySQLResult:-939456456,0,3>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmydata = dbGetQuery(con, \"select * from buy\")\nmydata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   num mem_id prod_name group_name price amount\n1    1    BLK      지갑       <NA>    30      2\n2    2    BLK  맥북프로     디지털  1000      1\n3    3    APN    아이폰     디지털   200      1\n4    4    MMU    아이폰     디지털   200      5\n5    5    BLK    청바지       패션    50      3\n6    6    MMU    에어팟     디지털    80     10\n7    7    GRL   혼공SQL       서적    15      5\n8    8    APN   혼공SQL       서적    15      2\n9    9    APN    청바지       패션    50      1\n10  10    MMU      지갑       <NA>    30      1\n11  11    APN   혼공SQL       서적    15      1\n12  12    MMU      지갑       <NA>    30      4\n```\n:::\n:::\n\n\n\nmarket_db에 어떤 table이 저장되어 있는지 확인해볼 수 있다. \n\n::: {.cell}\n\n```{.r .cell-code}\ndbListTables(con)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"buy\"       \"emp_table\" \"hongong1\"  \"hongong2\"  \"hongong3\"  \"hongong4\" \n[7] \"member\"   \n```\n:::\n:::\n\n\n\n## R에 테이블 저장 \n\nmarket_db에 있는 buy table을 R data.frame으로 불러올 수 있다. \n\n::: {.cell}\n\n```{.r .cell-code}\nbuy_dat <- dbReadTable(con, \"buy\")\nbuy_dat %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  num mem_id prod_name group_name price amount\n1   1    BLK      지갑       <NA>    30      2\n2   2    BLK  맥북프로     디지털  1000      1\n3   3    APN    아이폰     디지털   200      1\n4   4    MMU    아이폰     디지털   200      5\n5   5    BLK    청바지       패션    50      3\n6   6    MMU    에어팟     디지털    80     10\n```\n:::\n\n```{.r .cell-code}\nbuy_dat %>% str()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t12 obs. of  6 variables:\n $ num       : int  1 2 3 4 5 6 7 8 9 10 ...\n $ mem_id    : chr  \"BLK\" \"BLK\" \"APN\" \"MMU\" ...\n $ prod_name : chr  \"지갑\" \"맥북프로\" \"아이폰\" \"아이폰\" ...\n $ group_name: chr  NA \"디지털\" \"디지털\" \"디지털\" ...\n $ price     : int  30 1000 200 200 50 80 15 15 50 30 ...\n $ amount    : int  2 1 1 5 3 10 5 2 1 1 ...\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}